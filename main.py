import random


class Settings:
    PLAYERS_COUNT: int = 4
    MIN_LIVE_RATIO: float = 0.2
    MAX_LIVE_RATIO: float = 0.7
    LIVE_BULLET: str = 'üî¥'
    BLANK_BULLET: str = 'üîµ'

    @classmethod
    def get_bullet(self, is_live: bool) -> str:
        return self.LIVE_BULLET if is_live else self.BLANK_BULLET


NUMS_MAPPER: dict[int, str] = {
    1: '1Ô∏è‚É£',
    2: '2Ô∏è‚É£',
    3: '3Ô∏è‚É£',
    4: '4Ô∏è‚É£',
    5: '5Ô∏è‚É£',
    6: '6Ô∏è‚É£',
    7: '7Ô∏è‚É£',
    8: '8Ô∏è‚É£',
    9: '9Ô∏è‚É£',
    10: 'üîü',
}


def print_line():
    print('-'*40)


def charge_bullets():
    if not (2 <= Settings.PLAYERS_COUNT <= 4):
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç 2 –¥–æ 4 –∏–≥—Ä–æ–∫–æ–≤")

    total: int = random.randint(Settings.PLAYERS_COUNT, Settings.PLAYERS_COUNT + 4)
    min_live: int = max(1, int(total * Settings.MIN_LIVE_RATIO))
    max_live: int = max(min_live, int(total * Settings.MAX_LIVE_RATIO))
    num_live: int = random.randint(min_live, max_live)
    return [True] * num_live + [False] * (total - num_live)


def display_bullets():
    bullets: list[bool] = charge_bullets()

    random.shuffle(bullets)
    print(
        f'–°–∫–∞–∂–∏ –∏–≥—Ä–æ–∫–∞–º, —á—Ç–æ –≤ –∏–≥—Ä–µ:\n{NUMS_MAPPER[bullets.count(True)]}{Settings.LIVE_BULLET} '
        f'–∏ {NUMS_MAPPER[bullets.count(False)]}{Settings.BLANK_BULLET}'
    )
    print(f'–ò–ª–∏ –ø–æ–∫–∞–∂–∏ –∏–º –≥–∏–ª—å–∑—ã:\n{"".join([Settings.get_bullet(bullet) for bullet in bullets])}')
    
    print_line()
    random.shuffle(bullets)
    print(f'–ü–æ—Ä—è–¥–æ–∫ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –∏–≥—Ä–µ:\n{"".join([Settings.get_bullet(bullet) for bullet in bullets])}')
    
    print_line()
    print('–ó–∞—Ä—è–¥–∏ –ø–∞—Ç—Ä–æ–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω/–¥—É–ª–æ –≤ –ø–æ—Ä—è–¥–∫–µ:')
    middle: int = 5 if len(bullets) <= 5 else (len(bullets) + 1) // 2
    for p in (bullets[:middle], bullets[middle:]):
        if p:
            print(
                f'{''.join([Settings.get_bullet(bullet) for bullet in p[:0:-1]])}/'
                f'{Settings.get_bullet(p[0])}'
            )


if __name__ == '__main__':
    display_bullets()
